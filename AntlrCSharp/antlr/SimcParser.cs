//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Data/Code/SimulationCraftParser/AntlrCSharp/SimcParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SimcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACTIONS=1, ASSIGN=2, VARIABLE=3, VARIABLEASSIGN=4, VARDEFAULT=5, VARVALUE=6, 
		VARVALELSE=7, VARCONDITION=8, VAROP=9, ACTIF=10, ACTCALL=11, TARGETIF=12, 
		MIN=13, MAX=14, EXTERN=15, TARGETCYCLE=16, ACTINTERRUPT=17, INTERRUPTIF=18, 
		USEITEM=19, PRECOMBATTIME=20, USEOFFGCD=21, SLOT=22, COMMENT=23, NEWLINE=24, 
		BITWISE_OR=25, OPEN_PARENS=26, CLOSE_PARENS=27, COMMA=28, PLUS=29, MINUS=30, 
		STAR=31, DIV=32, PERCENT=33, AMP=34, LT=35, GT=36, DOT=37, OP_EQ=38, OP_NOT=39, 
		OP_LE=40, OP_GE=41, HASH=42, IDENTIFIER=43, DECIMAL_NUMERAL=44, NUMERAL=45;
	public const int
		RULE_profile = 0, RULE_commentLine = 1, RULE_callAction = 2, RULE_externAction = 3, 
		RULE_useItemAction = 4, RULE_variableAction = 5, RULE_conditionalAction = 6, 
		RULE_actionpart = 7, RULE_target_cycle = 8, RULE_target_if = 9, RULE_dotted_name = 10, 
		RULE_simpleAction = 11, RULE_eval = 12, RULE_exp = 13, RULE_qualifier = 14, 
		RULE_precombat_time = 15, RULE_if_condition = 16, RULE_use_off_gcd_condition = 17;
	public static readonly string[] ruleNames = {
		"profile", "commentLine", "callAction", "externAction", "useItemAction", 
		"variableAction", "conditionalAction", "actionpart", "target_cycle", "target_if", 
		"dotted_name", "simpleAction", "eval", "exp", "qualifier", "precombat_time", 
		"if_condition", "use_off_gcd_condition"
	};

	private static readonly string[] _LiteralNames = {
		null, "'actions'", "'+=/'", "'variable,'", "'name='", "'default='", "'value='", 
		"'value_else='", "'condition='", "'op='", "'if='", null, "'target_if='", 
		"'min:'", "'max:'", "'invoke_external_buff'", "'cycle_targets='", "'interrupt='", 
		"'interrupt_if='", "'use_item'", "'precombat_time='", "'use_off_gcd='", 
		"'slot='", null, null, "'|'", "'('", "')'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'&'", "'<'", "'>'", "'.'", "'='", "'!'", "'<='", "'>='", 
		"'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACTIONS", "ASSIGN", "VARIABLE", "VARIABLEASSIGN", "VARDEFAULT", 
		"VARVALUE", "VARVALELSE", "VARCONDITION", "VAROP", "ACTIF", "ACTCALL", 
		"TARGETIF", "MIN", "MAX", "EXTERN", "TARGETCYCLE", "ACTINTERRUPT", "INTERRUPTIF", 
		"USEITEM", "PRECOMBATTIME", "USEOFFGCD", "SLOT", "COMMENT", "NEWLINE", 
		"BITWISE_OR", "OPEN_PARENS", "CLOSE_PARENS", "COMMA", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "LT", "GT", "DOT", "OP_EQ", "OP_NOT", 
		"OP_LE", "OP_GE", "HASH", "IDENTIFIER", "DECIMAL_NUMERAL", "NUMERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimcParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProfileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SimcParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SimcParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentLineContext[] commentLine() {
			return GetRuleContexts<CommentLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentLineContext commentLine(int i) {
			return GetRuleContext<CommentLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseItemActionContext[] useItemAction() {
			return GetRuleContexts<UseItemActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseItemActionContext useItemAction(int i) {
			return GetRuleContext<UseItemActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternActionContext[] externAction() {
			return GetRuleContexts<ExternActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternActionContext externAction(int i) {
			return GetRuleContext<ExternActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallActionContext[] callAction() {
			return GetRuleContexts<CallActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallActionContext callAction(int i) {
			return GetRuleContext<CallActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableActionContext[] variableAction() {
			return GetRuleContexts<VariableActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableActionContext variableAction(int i) {
			return GetRuleContext<VariableActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleActionContext[] simpleAction() {
			return GetRuleContexts<SimpleActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleActionContext simpleAction(int i) {
			return GetRuleContext<SimpleActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalActionContext[] conditionalAction() {
			return GetRuleContexts<ConditionalActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalActionContext conditionalAction(int i) {
			return GetRuleContext<ConditionalActionContext>(i);
		}
		public ProfileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProfileContext profile() {
		ProfileContext _localctx = new ProfileContext(Context, State);
		EnterRule(_localctx, 0, RULE_profile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ACTIONS || _la==COMMENT) {
				{
				{
				State = 43;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 36;
					commentLine();
					}
					break;
				case 2:
					{
					State = 37;
					useItemAction();
					}
					break;
				case 3:
					{
					State = 38;
					externAction();
					}
					break;
				case 4:
					{
					State = 39;
					callAction();
					}
					break;
				case 5:
					{
					State = 40;
					variableAction();
					}
					break;
				case 6:
					{
					State = 41;
					simpleAction();
					}
					break;
				case 7:
					{
					State = 42;
					conditionalAction();
					}
					break;
				}
				State = 45;
				Match(NEWLINE);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(SimcParser.COMMENT, 0); }
		public CommentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentLineContext commentLine() {
		CommentLineContext _localctx = new CommentLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_commentLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallActionContext : ParserRuleContext {
		public Dotted_nameContext variableName;
		public ExpContext exp_if;
		[System.Diagnostics.DebuggerNonUserCode] public ActionpartContext actionpart() {
			return GetRuleContext<ActionpartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTCALL() { return GetToken(SimcParser.ACTCALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SimcParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SimcParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLEASSIGN() { return GetToken(SimcParser.VARIABLEASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SimcParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIF() { return GetToken(SimcParser.ACTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public CallActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallActionContext callAction() {
		CallActionContext _localctx = new CallActionContext(Context, State);
		EnterRule(_localctx, 4, RULE_callAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			actionpart();
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==OP_EQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 56;
			Match(ACTCALL);
			State = 57;
			Match(COMMA);
			State = 58;
			Match(VARIABLEASSIGN);
			State = 59;
			_localctx.variableName = dotted_name(0);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 60;
				Match(COMMA);
				State = 61;
				Match(ACTIF);
				State = 62;
				_localctx.exp_if = exp(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternActionContext : ParserRuleContext {
		public Dotted_nameContext variableName;
		public ExpContext exp_if;
		[System.Diagnostics.DebuggerNonUserCode] public ActionpartContext actionpart() {
			return GetRuleContext<ActionpartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(SimcParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SimcParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SimcParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLEASSIGN() { return GetToken(SimcParser.VARIABLEASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SimcParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIF() { return GetToken(SimcParser.ACTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExternActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternActionContext externAction() {
		ExternActionContext _localctx = new ExternActionContext(Context, State);
		EnterRule(_localctx, 6, RULE_externAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			actionpart();
			State = 66;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==OP_EQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 67;
			Match(EXTERN);
			State = 68;
			Match(COMMA);
			State = 69;
			Match(VARIABLEASSIGN);
			State = 70;
			_localctx.variableName = dotted_name(0);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 71;
				Match(COMMA);
				State = 72;
				Match(ACTIF);
				State = 73;
				_localctx.exp_if = exp(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseItemActionContext : ParserRuleContext {
		public Dotted_nameContext variableName;
		public ExpContext exp_if;
		[System.Diagnostics.DebuggerNonUserCode] public ActionpartContext actionpart() {
			return GetRuleContext<ActionpartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USEITEM() { return GetToken(SimcParser.USEITEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SimcParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SimcParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SimcParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_off_gcd_conditionContext use_off_gcd_condition() {
			return GetRuleContext<Use_off_gcd_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOT() { return GetToken(SimcParser.SLOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimcParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLEASSIGN() { return GetToken(SimcParser.VARIABLEASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIF() { return GetToken(SimcParser.ACTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public UseItemActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useItemAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseItemAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseItemActionContext useItemAction() {
		UseItemActionContext _localctx = new UseItemActionContext(Context, State);
		EnterRule(_localctx, 8, RULE_useItemAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			actionpart();
			State = 77;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==OP_EQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 78;
			Match(USEITEM);
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 79;
				Match(COMMA);
				State = 80;
				use_off_gcd_condition();
				}
				break;
			}
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 83;
				Match(COMMA);
				State = 84;
				Match(SLOT);
				State = 85;
				Match(IDENTIFIER);
				}
				break;
			}
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 88;
				Match(COMMA);
				State = 89;
				Match(VARIABLEASSIGN);
				State = 90;
				_localctx.variableName = dotted_name(0);
				}
				break;
			}
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 93;
				Match(COMMA);
				State = 94;
				Match(ACTIF);
				State = 95;
				_localctx.exp_if = exp(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableActionContext : ParserRuleContext {
		public Dotted_nameContext variableName;
		public IToken variableOperator;
		public ExpContext variableValue;
		public ExpContext variableElse;
		public ExpContext exp_condition;
		public ExpContext exp_if;
		[System.Diagnostics.DebuggerNonUserCode] public ActionpartContext actionpart() {
			return GetRuleContext<ActionpartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SimcParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLEASSIGN() { return GetToken(SimcParser.VARIABLEASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SimcParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SimcParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SimcParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARDEFAULT() { return GetToken(SimcParser.VARDEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAROP() { return GetToken(SimcParser.VAROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARVALUE() { return GetToken(SimcParser.VARVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARVALELSE() { return GetToken(SimcParser.VARVALELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCONDITION() { return GetToken(SimcParser.VARCONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIF() { return GetToken(SimcParser.ACTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimcParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public VariableActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableActionContext variableAction() {
		VariableActionContext _localctx = new VariableActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			actionpart();
			State = 99;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==OP_EQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 100;
			Match(VARIABLE);
			State = 101;
			Match(VARIABLEASSIGN);
			State = 102;
			_localctx.variableName = dotted_name(0);
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 103;
				Match(COMMA);
				State = 104;
				Match(VARDEFAULT);
				State = 105;
				qualifier();
				}
				break;
			}
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 108;
				Match(COMMA);
				State = 109;
				Match(VAROP);
				State = 110;
				_localctx.variableOperator = Match(IDENTIFIER);
				}
				break;
			}
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 113;
				Match(COMMA);
				State = 114;
				Match(VARVALUE);
				State = 115;
				_localctx.variableValue = exp(0);
				}
				break;
			}
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 118;
				Match(COMMA);
				State = 119;
				Match(VARVALELSE);
				State = 120;
				_localctx.variableElse = exp(0);
				}
				break;
			}
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 123;
				Match(COMMA);
				State = 124;
				Match(VARCONDITION);
				State = 125;
				_localctx.exp_condition = exp(0);
				}
				break;
			}
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 128;
				Match(COMMA);
				State = 129;
				Match(ACTIF);
				State = 130;
				_localctx.exp_if = exp(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalActionContext : ParserRuleContext {
		public Dotted_nameContext actionName;
		[System.Diagnostics.DebuggerNonUserCode] public ActionpartContext actionpart() {
			return GetRuleContext<ActionpartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SimcParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SimcParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SimcParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGETCYCLE() { return GetToken(SimcParser.TARGETCYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precombat_timeContext precombat_time() {
			return GetRuleContext<Precombat_timeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_ifContext target_if() {
			return GetRuleContext<Target_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_off_gcd_conditionContext use_off_gcd_condition() {
			return GetRuleContext<Use_off_gcd_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_conditionContext if_condition() {
			return GetRuleContext<If_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTINTERRUPT() { return GetToken(SimcParser.ACTINTERRUPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERRUPTIF() { return GetToken(SimcParser.INTERRUPTIF, 0); }
		public ConditionalActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalActionContext conditionalAction() {
		ConditionalActionContext _localctx = new ConditionalActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_conditionalAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			actionpart();
			State = 134;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==OP_EQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 135;
			_localctx.actionName = dotted_name(0);
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 136;
				Match(COMMA);
				State = 137;
				Match(TARGETCYCLE);
				State = 138;
				exp(0);
				}
				break;
			}
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 141;
				Match(COMMA);
				State = 142;
				precombat_time();
				}
				break;
			}
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 145;
				Match(COMMA);
				State = 146;
				target_if();
				}
				break;
			}
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 149;
				Match(COMMA);
				State = 150;
				use_off_gcd_condition();
				}
				break;
			}
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 153;
				Match(COMMA);
				State = 154;
				if_condition();
				}
				break;
			}
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 157;
				Match(COMMA);
				State = 158;
				Match(ACTINTERRUPT);
				State = 159;
				exp(0);
				}
				break;
			}
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 162;
				Match(COMMA);
				State = 163;
				Match(INTERRUPTIF);
				State = 164;
				exp(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionpartContext : ParserRuleContext {
		public IToken subName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIONS() { return GetToken(SimcParser.ACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SimcParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimcParser.IDENTIFIER, 0); }
		public ActionpartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionpart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionpart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionpartContext actionpart() {
		ActionpartContext _localctx = new ActionpartContext(Context, State);
		EnterRule(_localctx, 14, RULE_actionpart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(ACTIONS);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 168;
				Match(DOT);
				State = 169;
				_localctx.subName = Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_cycleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SimcParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGETCYCLE() { return GetToken(SimcParser.TARGETCYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMERAL() { return GetToken(SimcParser.DECIMAL_NUMERAL, 0); }
		public Target_cycleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_cycle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_cycle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_cycleContext target_cycle() {
		Target_cycleContext _localctx = new Target_cycleContext(Context, State);
		EnterRule(_localctx, 16, RULE_target_cycle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(COMMA);
			State = 173;
			Match(TARGETCYCLE);
			State = 174;
			Match(OP_EQ);
			State = 175;
			Match(DECIMAL_NUMERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGETIF() { return GetToken(SimcParser.TARGETIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(SimcParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(SimcParser.MAX, 0); }
		public Target_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_ifContext target_if() {
		Target_ifContext _localctx = new Target_ifContext(Context, State);
		EnterRule(_localctx, 18, RULE_target_if);
		int _la;
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 177;
				Match(TARGETIF);
				State = 178;
				_la = TokenStream.LA(1);
				if ( !(_la==MIN || _la==MAX) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 179;
				exp(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 180;
				Match(TARGETIF);
				State = 181;
				exp(0);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SimcParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SimcParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SimcParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMERAL() { return GetToken(SimcParser.DECIMAL_NUMERAL, 0); }
		public Dotted_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_nameContext dotted_name() {
		return dotted_name(0);
	}

	private Dotted_nameContext dotted_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dotted_nameContext _localctx = new Dotted_nameContext(Context, _parentState);
		Dotted_nameContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_dotted_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 185;
			Match(IDENTIFIER);
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 186;
				Match(DOT);
				State = 187;
				Match(IDENTIFIER);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 198;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 196;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new Dotted_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dotted_name);
						State = 190;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 191;
						Match(DOT);
						State = 192;
						Match(IDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new Dotted_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_dotted_name);
						State = 193;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 194;
						Match(DOT);
						State = 195;
						Match(DECIMAL_NUMERAL);
						}
						break;
					}
					} 
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleActionContext : ParserRuleContext {
		public IToken actionName;
		[System.Diagnostics.DebuggerNonUserCode] public ActionpartContext actionpart() {
			return GetRuleContext<ActionpartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SimcParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimcParser.IDENTIFIER, 0); }
		public SimpleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleActionContext simpleAction() {
		SimpleActionContext _localctx = new SimpleActionContext(Context, State);
		EnterRule(_localctx, 22, RULE_simpleAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			actionpart();
			State = 202;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==OP_EQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 203;
			_localctx.actionName = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(SimcParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SimcParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SimcParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(SimcParser.OP_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(SimcParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(SimcParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(SimcParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(SimcParser.PERCENT, i);
		}
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 24, RULE_eval);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(BITWISE_OR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(LT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207;
				Match(GT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 208;
				Match(OP_EQ);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 209;
				Match(OP_NOT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 210;
				Match(OP_LE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 211;
				Match(OP_GE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 212;
				Match(PERCENT);
				State = 213;
				Match(PERCENT);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 214;
				Match(PERCENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(SimcParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(SimcParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(SimcParser.OP_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMERAL() { return GetToken(SimcParser.DECIMAL_NUMERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(SimcParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(SimcParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvalContext eval() {
			return GetRuleContext<EvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SimcParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SimcParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SimcParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SimcParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SimcParser.OP_EQ, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				{
				State = 218;
				Match(OPEN_PARENS);
				State = 219;
				exp(0);
				State = 220;
				Match(CLOSE_PARENS);
				}
				break;
			case OP_NOT:
				{
				State = 222;
				Match(OP_NOT);
				State = 223;
				exp(8);
				}
				break;
			case IDENTIFIER:
				{
				State = 224;
				dotted_name(0);
				}
				break;
			case DECIMAL_NUMERAL:
				{
				State = 225;
				Match(DECIMAL_NUMERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 246;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 244;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 228;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 229;
						Match(BITWISE_OR);
						State = 230;
						exp(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 231;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 232;
						Match(AMP);
						State = 233;
						exp(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 234;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 235;
						eval();
						State = 236;
						exp(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 238;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 239;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 240;
						exp(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 241;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 242;
						Match(OP_EQ);
						State = 243;
						exp(4);
						}
						break;
					}
					} 
				}
				State = 248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMERAL() { return GetToken(SimcParser.DECIMAL_NUMERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_qualifier);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_NUMERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				Match(DECIMAL_NUMERAL);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				dotted_name(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precombat_timeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECOMBATTIME() { return GetToken(SimcParser.PRECOMBATTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMERAL() { return GetToken(SimcParser.DECIMAL_NUMERAL, 0); }
		public Precombat_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precombat_time; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecombat_time(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precombat_timeContext precombat_time() {
		Precombat_timeContext _localctx = new Precombat_timeContext(Context, State);
		EnterRule(_localctx, 30, RULE_precombat_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(PRECOMBATTIME);
			State = 254;
			Match(DECIMAL_NUMERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIF() { return GetToken(SimcParser.ACTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public If_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_conditionContext if_condition() {
		If_conditionContext _localctx = new If_conditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_if_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(ACTIF);
			State = 257;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_off_gcd_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USEOFFGCD() { return GetToken(SimcParser.USEOFFGCD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Use_off_gcd_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_off_gcd_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimcParserVisitor<TResult> typedVisitor = visitor as ISimcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_off_gcd_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_off_gcd_conditionContext use_off_gcd_condition() {
		Use_off_gcd_conditionContext _localctx = new Use_off_gcd_conditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_use_off_gcd_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(USEOFFGCD);
			State = 260;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return dotted_name_sempred((Dotted_nameContext)_localctx, predIndex);
		case 13: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool dotted_name_sempred(Dotted_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,45,263,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,44,8,0,1,
		0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,3,2,64,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,75,8,3,1,4,
		1,4,1,4,1,4,1,4,3,4,82,8,4,1,4,1,4,1,4,3,4,87,8,4,1,4,1,4,1,4,3,4,92,8,
		4,1,4,1,4,1,4,3,4,97,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,107,8,5,1,
		5,1,5,1,5,3,5,112,8,5,1,5,1,5,1,5,3,5,117,8,5,1,5,1,5,1,5,3,5,122,8,5,
		1,5,1,5,1,5,3,5,127,8,5,1,5,1,5,1,5,3,5,132,8,5,1,6,1,6,1,6,1,6,1,6,1,
		6,3,6,140,8,6,1,6,1,6,3,6,144,8,6,1,6,1,6,3,6,148,8,6,1,6,1,6,3,6,152,
		8,6,1,6,1,6,3,6,156,8,6,1,6,1,6,1,6,3,6,161,8,6,1,6,1,6,1,6,3,6,166,8,
		6,1,7,1,7,1,7,3,7,171,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,
		183,8,9,1,10,1,10,1,10,1,10,3,10,189,8,10,1,10,1,10,1,10,1,10,1,10,1,10,
		5,10,197,8,10,10,10,12,10,200,9,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,216,8,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,3,13,227,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,245,8,13,10,13,12,13,
		248,9,13,1,14,1,14,3,14,252,8,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,
		17,1,17,1,17,0,2,20,26,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,0,3,2,0,2,2,38,38,1,0,13,14,1,0,29,32,292,0,49,1,0,0,0,2,52,1,0,0,0,
		4,54,1,0,0,0,6,65,1,0,0,0,8,76,1,0,0,0,10,98,1,0,0,0,12,133,1,0,0,0,14,
		167,1,0,0,0,16,172,1,0,0,0,18,182,1,0,0,0,20,184,1,0,0,0,22,201,1,0,0,
		0,24,215,1,0,0,0,26,226,1,0,0,0,28,251,1,0,0,0,30,253,1,0,0,0,32,256,1,
		0,0,0,34,259,1,0,0,0,36,44,3,2,1,0,37,44,3,8,4,0,38,44,3,6,3,0,39,44,3,
		4,2,0,40,44,3,10,5,0,41,44,3,22,11,0,42,44,3,12,6,0,43,36,1,0,0,0,43,37,
		1,0,0,0,43,38,1,0,0,0,43,39,1,0,0,0,43,40,1,0,0,0,43,41,1,0,0,0,43,42,
		1,0,0,0,44,45,1,0,0,0,45,46,5,24,0,0,46,48,1,0,0,0,47,43,1,0,0,0,48,51,
		1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,1,1,0,0,0,51,49,1,0,0,0,52,53,5,
		23,0,0,53,3,1,0,0,0,54,55,3,14,7,0,55,56,7,0,0,0,56,57,5,11,0,0,57,58,
		5,28,0,0,58,59,5,4,0,0,59,63,3,20,10,0,60,61,5,28,0,0,61,62,5,10,0,0,62,
		64,3,26,13,0,63,60,1,0,0,0,63,64,1,0,0,0,64,5,1,0,0,0,65,66,3,14,7,0,66,
		67,7,0,0,0,67,68,5,15,0,0,68,69,5,28,0,0,69,70,5,4,0,0,70,74,3,20,10,0,
		71,72,5,28,0,0,72,73,5,10,0,0,73,75,3,26,13,0,74,71,1,0,0,0,74,75,1,0,
		0,0,75,7,1,0,0,0,76,77,3,14,7,0,77,78,7,0,0,0,78,81,5,19,0,0,79,80,5,28,
		0,0,80,82,3,34,17,0,81,79,1,0,0,0,81,82,1,0,0,0,82,86,1,0,0,0,83,84,5,
		28,0,0,84,85,5,22,0,0,85,87,5,43,0,0,86,83,1,0,0,0,86,87,1,0,0,0,87,91,
		1,0,0,0,88,89,5,28,0,0,89,90,5,4,0,0,90,92,3,20,10,0,91,88,1,0,0,0,91,
		92,1,0,0,0,92,96,1,0,0,0,93,94,5,28,0,0,94,95,5,10,0,0,95,97,3,26,13,0,
		96,93,1,0,0,0,96,97,1,0,0,0,97,9,1,0,0,0,98,99,3,14,7,0,99,100,7,0,0,0,
		100,101,5,3,0,0,101,102,5,4,0,0,102,106,3,20,10,0,103,104,5,28,0,0,104,
		105,5,5,0,0,105,107,3,28,14,0,106,103,1,0,0,0,106,107,1,0,0,0,107,111,
		1,0,0,0,108,109,5,28,0,0,109,110,5,9,0,0,110,112,5,43,0,0,111,108,1,0,
		0,0,111,112,1,0,0,0,112,116,1,0,0,0,113,114,5,28,0,0,114,115,5,6,0,0,115,
		117,3,26,13,0,116,113,1,0,0,0,116,117,1,0,0,0,117,121,1,0,0,0,118,119,
		5,28,0,0,119,120,5,7,0,0,120,122,3,26,13,0,121,118,1,0,0,0,121,122,1,0,
		0,0,122,126,1,0,0,0,123,124,5,28,0,0,124,125,5,8,0,0,125,127,3,26,13,0,
		126,123,1,0,0,0,126,127,1,0,0,0,127,131,1,0,0,0,128,129,5,28,0,0,129,130,
		5,10,0,0,130,132,3,26,13,0,131,128,1,0,0,0,131,132,1,0,0,0,132,11,1,0,
		0,0,133,134,3,14,7,0,134,135,7,0,0,0,135,139,3,20,10,0,136,137,5,28,0,
		0,137,138,5,16,0,0,138,140,3,26,13,0,139,136,1,0,0,0,139,140,1,0,0,0,140,
		143,1,0,0,0,141,142,5,28,0,0,142,144,3,30,15,0,143,141,1,0,0,0,143,144,
		1,0,0,0,144,147,1,0,0,0,145,146,5,28,0,0,146,148,3,18,9,0,147,145,1,0,
		0,0,147,148,1,0,0,0,148,151,1,0,0,0,149,150,5,28,0,0,150,152,3,34,17,0,
		151,149,1,0,0,0,151,152,1,0,0,0,152,155,1,0,0,0,153,154,5,28,0,0,154,156,
		3,32,16,0,155,153,1,0,0,0,155,156,1,0,0,0,156,160,1,0,0,0,157,158,5,28,
		0,0,158,159,5,17,0,0,159,161,3,26,13,0,160,157,1,0,0,0,160,161,1,0,0,0,
		161,165,1,0,0,0,162,163,5,28,0,0,163,164,5,18,0,0,164,166,3,26,13,0,165,
		162,1,0,0,0,165,166,1,0,0,0,166,13,1,0,0,0,167,170,5,1,0,0,168,169,5,37,
		0,0,169,171,5,43,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,15,1,0,0,0,172,
		173,5,28,0,0,173,174,5,16,0,0,174,175,5,38,0,0,175,176,5,44,0,0,176,17,
		1,0,0,0,177,178,5,12,0,0,178,179,7,1,0,0,179,183,3,26,13,0,180,181,5,12,
		0,0,181,183,3,26,13,0,182,177,1,0,0,0,182,180,1,0,0,0,183,19,1,0,0,0,184,
		185,6,10,-1,0,185,188,5,43,0,0,186,187,5,37,0,0,187,189,5,43,0,0,188,186,
		1,0,0,0,188,189,1,0,0,0,189,198,1,0,0,0,190,191,10,2,0,0,191,192,5,37,
		0,0,192,197,5,43,0,0,193,194,10,1,0,0,194,195,5,37,0,0,195,197,5,44,0,
		0,196,190,1,0,0,0,196,193,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,
		199,1,0,0,0,199,21,1,0,0,0,200,198,1,0,0,0,201,202,3,14,7,0,202,203,7,
		0,0,0,203,204,5,43,0,0,204,23,1,0,0,0,205,216,5,25,0,0,206,216,5,35,0,
		0,207,216,5,36,0,0,208,216,5,38,0,0,209,216,5,39,0,0,210,216,5,40,0,0,
		211,216,5,41,0,0,212,213,5,33,0,0,213,216,5,33,0,0,214,216,5,33,0,0,215,
		205,1,0,0,0,215,206,1,0,0,0,215,207,1,0,0,0,215,208,1,0,0,0,215,209,1,
		0,0,0,215,210,1,0,0,0,215,211,1,0,0,0,215,212,1,0,0,0,215,214,1,0,0,0,
		216,25,1,0,0,0,217,218,6,13,-1,0,218,219,5,26,0,0,219,220,3,26,13,0,220,
		221,5,27,0,0,221,227,1,0,0,0,222,223,5,39,0,0,223,227,3,26,13,8,224,227,
		3,20,10,0,225,227,5,44,0,0,226,217,1,0,0,0,226,222,1,0,0,0,226,224,1,0,
		0,0,226,225,1,0,0,0,227,246,1,0,0,0,228,229,10,7,0,0,229,230,5,25,0,0,
		230,245,3,26,13,8,231,232,10,6,0,0,232,233,5,34,0,0,233,245,3,26,13,7,
		234,235,10,5,0,0,235,236,3,24,12,0,236,237,3,26,13,6,237,245,1,0,0,0,238,
		239,10,4,0,0,239,240,7,2,0,0,240,245,3,26,13,5,241,242,10,3,0,0,242,243,
		5,38,0,0,243,245,3,26,13,4,244,228,1,0,0,0,244,231,1,0,0,0,244,234,1,0,
		0,0,244,238,1,0,0,0,244,241,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,
		247,1,0,0,0,247,27,1,0,0,0,248,246,1,0,0,0,249,252,5,44,0,0,250,252,3,
		20,10,0,251,249,1,0,0,0,251,250,1,0,0,0,252,29,1,0,0,0,253,254,5,20,0,
		0,254,255,5,44,0,0,255,31,1,0,0,0,256,257,5,10,0,0,257,258,3,26,13,0,258,
		33,1,0,0,0,259,260,5,21,0,0,260,261,3,26,13,0,261,35,1,0,0,0,31,43,49,
		63,74,81,86,91,96,106,111,116,121,126,131,139,143,147,151,155,160,165,
		170,182,188,196,198,215,226,244,246,251
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
